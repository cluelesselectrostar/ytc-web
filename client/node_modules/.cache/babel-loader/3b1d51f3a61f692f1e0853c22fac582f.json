{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from\"react\";import useResizeObserver from\"./useResizeObserver\";import{select,geoPath,geoMercator,geoConicEquidistant,min,max,scaleLinear}from\"d3\";import{jsx as _jsx}from\"react/jsx-runtime\";function GeoChart(_ref){var data=_ref.data,coviddata=_ref.coviddata,property=_ref.property,date=_ref.date;var svgRef=useRef();var wrapperRef=useRef();var dimensions=useResizeObserver(wrapperRef);var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),selectedCountry=_useState2[0],setSelectedCountry=_useState2[1];useEffect(function(){console.log(date);var svg=select(svgRef.current);// Use resized dimensions, but fall back to get bounding client rect if no dimensions yet\nvar _ref2=dimensions||wrapperRef.current.getBoundingClientRect(),width=_ref2.width,height=_ref2.height;// Path generator from coordinates to border shapes on SVG\nvar projection=geoMercator().fitSize([width,height],selectedCountry||data);var pathGenerator=geoPath().projection(projection);// Create path element for every country in the world\n// NOTE: Merge data into copy of GEO JSON\n//var coviddata_res = Object.entries(coviddata);\n//console.log(coviddata_res);\n/*\r\n        var cov_res = [];\r\n        for (const country of coviddata_res) {\r\n            const name = country[0];\r\n            console.log(name);\r\n            const Datum = country[1].data[5][property];\r\n            console.log(Datum);\r\n        }\r\n        */var cov_res=Object.entries(coviddata).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),k=_ref4[0],v=_ref4[1];return{Label:k,Datum:function(){var _iterator=_createForOfIteratorHelper(v.data),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var day=_step.value;var search_date=day.date;if(search_date===date){return day[property];}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return-100;}()};});var copy=data;for(var _i=0,_Object$entries=Object.entries(copy.features);_i<_Object$entries.length;_i++){var i=_Object$entries[_i];//console.log(i[1].properties.adm0_a3);\nvar name=\"\";var num=-100;// TODO: LOOP THROUGH COVIDDATA\nvar _iterator2=_createForOfIteratorHelper(cov_res),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var j=_step2.value;name=j.Label;if(name===i[1].properties.adm0_a3){//console.log(name)\nif(j.Datum){num=j.Datum;}break;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}i[1].properties.num=num;}var minProp=min(data.features,function(feature){return feature.properties.num;});var maxProp=max(data.features,function(feature){return feature.properties.num;});// Input, then output\nvar colorScale=scaleLinear().domain([minProp,maxProp]).range(['#ccc',\"teal\"]);svg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\",function(e,feature){setSelectedCountry(selectedCountry===feature?null:feature);}).attr(\"class\",\"country\").transition()//zoom effect\n.duration(1000).attr(\"fill\",function(feature){return feature.properties.num===-100?\"black\":colorScale(feature.properties.num);}).attr(\"d\",function(feature){return pathGenerator(feature);});// render text\nsvg.selectAll(\".label\").data([selectedCountry]).join(\"text\").attr(\"class\",\"label\").text(function(feature){return feature&&feature.properties.name+\": \"+feature.properties.num.toLocaleString();}).attr(\"x\",10).attr(\"y\",25);},[data,dimensions,property,selectedCountry,date]);return/*#__PURE__*/_jsx(\"div\",{ref:wrapperRef,style:{marginBottom:\"2rem\"},children:/*#__PURE__*/_jsx(\"svg\",{ref:svgRef,class:\"w-100\"})});}export default GeoChart;","map":{"version":3,"sources":["C:/Users/yanni/Documents/App_Development/yanni-webpage/src/covid_tracker/Geochart.js"],"names":["React","useRef","useEffect","useState","useResizeObserver","select","geoPath","geoMercator","geoConicEquidistant","min","max","scaleLinear","GeoChart","data","coviddata","property","date","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","console","log","svg","current","getBoundingClientRect","width","height","projection","fitSize","pathGenerator","cov_res","Object","entries","map","k","v","Label","Datum","day","search_date","copy","features","i","name","num","j","properties","adm0_a3","minProp","feature","maxProp","colorScale","domain","range","selectAll","join","on","e","attr","transition","duration","text","toLocaleString","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport { select, geoPath, geoMercator, geoConicEquidistant, min, max, scaleLinear } from \"d3\";\r\n\r\nfunction GeoChart({ data, coviddata, property, date }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(date);\r\n\r\n        const svg = select(svgRef.current);\r\n\r\n        // Use resized dimensions, but fall back to get bounding client rect if no dimensions yet\r\n        const { width, height } =\r\n            dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        // Path generator from coordinates to border shapes on SVG\r\n        const projection = geoMercator().fitSize(\r\n            [width, height],\r\n            selectedCountry || data);\r\n\r\n        const pathGenerator = geoPath().projection(projection);\r\n\r\n        // Create path element for every country in the world\r\n        // NOTE: Merge data into copy of GEO JSON\r\n        \r\n        //var coviddata_res = Object.entries(coviddata);\r\n        //console.log(coviddata_res);\r\n\r\n        /*\r\n        var cov_res = [];\r\n        for (const country of coviddata_res) {\r\n            const name = country[0];\r\n            console.log(name);\r\n            const Datum = country[1].data[5][property];\r\n            console.log(Datum);\r\n        }\r\n        */\r\n\r\n\r\n        var cov_res = Object.entries(coviddata).map(([k, v]) => (\r\n            {\r\n                Label: k,\r\n                Datum: (function () {\r\n                    for (const day of v.data) {\r\n                        var search_date = day.date;\r\n                        if (search_date === date) {\r\n                            return day[property];\r\n                        }\r\n                    }\r\n                    return -100;\r\n                })()\r\n            }\r\n        ));\r\n\r\n\r\n        var copy = data;\r\n\r\n        for (const i of Object.entries(copy.features)) {\r\n            //console.log(i[1].properties.adm0_a3);\r\n            var name = \"\";\r\n            var num = -100;\r\n\r\n            // TODO: LOOP THROUGH COVIDDATA\r\n            for (const j of cov_res) {\r\n                name = j.Label;\r\n                if (name === i[1].properties.adm0_a3) {\r\n                    //console.log(name)\r\n                    if (j.Datum) {\r\n                        num = j.Datum;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            i[1].properties.num = num;\r\n        }\r\n\r\n        const minProp = min(data.features, feature => feature.properties.num);\r\n        const maxProp = max(data.features, feature => feature.properties.num);\r\n\r\n        // Input, then output\r\n        const colorScale = scaleLinear()\r\n            .domain([minProp, maxProp])\r\n            .range(['#ccc', \"teal\"]);\r\n        svg.selectAll(\".country\")\r\n            .data(data.features)\r\n            .join(\"path\")\r\n            .on(\"click\", (e, feature) => {\r\n                setSelectedCountry(selectedCountry === feature ? null : feature);\r\n            })\r\n            .attr(\"class\", \"country\")\r\n            .transition() //zoom effect\r\n            .duration(1000)\r\n            .attr(\"fill\", feature => (feature.properties.num === -100) ? \"black\" : colorScale(feature.properties.num))\r\n            .attr(\"d\", feature => pathGenerator(feature));\r\n        // render text\r\n        svg\r\n            .selectAll(\".label\")\r\n            .data([selectedCountry])\r\n            .join(\"text\")\r\n            .attr(\"class\", \"label\")\r\n            .text(\r\n                feature =>\r\n                    feature &&\r\n                    feature.properties.name +\r\n                    \": \" +\r\n                    feature.properties.num.toLocaleString()\r\n            )\r\n            .attr(\"x\", 10)\r\n            .attr(\"y\", 25);\r\n\r\n\r\n\r\n    }, [data, dimensions, property, selectedCountry, date]);\r\n\r\n    return (\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n            <svg ref={svgRef} class=\"w-100\"></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}