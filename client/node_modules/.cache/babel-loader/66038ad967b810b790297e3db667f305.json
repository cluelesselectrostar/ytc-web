{"ast":null,"code":"import _objectSpread from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,useState,useEffect}from'react';//import AppMarkdown from '!!html-loader!./ffestiniog.md';\nimport ReactMarkdown from'react-markdown';import gfm from'remark-gfm';/*\r\nclass BlogImport extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { markdown: '' };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // Get the contents from the Markdown file and put them in the React state, so we can reference it in render() below.\r\n    fetch(AppMarkdown).then(res => res.text()).then(text => this.setState({ markdown: text }));\r\n  }\r\n\r\n  render() {\r\n    const { markdown } = this.state;\r\n    return <ReactMarkdown source={markdown} />;\r\n  }\r\n}\r\n\r\nfunction MDImport(require_name) {\r\n\r\n    const file_name = require_name;\r\n    const [post, setPost] = useState('');\r\n\r\n    \r\n    useEffect(() => {\r\n        import(`${file_name}`)\r\n            .then(res => {\r\n                fetch(res.default)\r\n                    .then(res => res.text())\r\n                    .then(res => setPost(res))\r\n                    .catch(err => console.log(err));\r\n            })\r\n            .catch(err => console.log(err));\r\n    });\r\n\r\n    return (\r\n        <div class=\"align-items-md-stretch h-100 p-5\">\r\n            <ReactMarkdown remarkPlugins={[gfm]} children={post} />\r\n        </div>\r\n    );\r\n    \r\n    //return{ __html: 'Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello'};\r\n\r\n}*/import{jsx as _jsx}from\"react/jsx-runtime\";var MDImport=/*#__PURE__*/function(_Component){_inherits(MDImport,_Component);var _super=_createSuper(MDImport);function MDImport(){var _this;_classCallCheck(this,MDImport);_this=_super.call(this);_this.state={markdown:null};return _this;}/*\r\n  componentWillMount() {\r\n    // Get the contents from the Markdown file and put them in the React state, so we can reference it in render() below.\r\n    fetch(require(`${this.props.filename}`)).then(res => res.text()).then(text => this.setState({ markdown: text }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    const readmePath = require(`${this.props.filename}`);\r\n  \r\n    fetch(readmePath)\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(text => {\r\n        this.setState({\r\n          markdown: text\r\n        })\r\n      })\r\n  }\r\n  */_createClass(MDImport,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch(\"\".concat(this.props.filename)).then(function(res){return res.text();}).then(function(markdown){return _this2.setState(function(state){return _objectSpread(_objectSpread({},state),{},{markdown:markdown});});}).catch(function(err){return console.error(err);});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(ReactMarkdown,{source:this.state.markdown});}}]);return MDImport;}(Component);export default MDImport;","map":{"version":3,"sources":["C:/Users/yanni/Documents/App_Development/yanni-webpage/src/blogs/archive/MDBlogImport.js"],"names":["React","Component","useState","useEffect","ReactMarkdown","gfm","MDImport","state","markdown","fetch","props","filename","then","res","text","setState","catch","err","console","error"],"mappings":"g1BAEA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,SAArC,KAAsD,OAAtD,CACA;AACA,MAAOC,CAAAA,aAAP,KAA0B,gBAA1B,CACA,MAAOC,CAAAA,GAAP,KAAgB,YAAhB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,8CAGMC,CAAAA,Q,oGAEJ,mBAAc,0CACZ,wBACA,MAAKC,KAAL,CAAa,CAAEC,QAAQ,CAAE,IAAZ,CAAb,CAFY,aAGb,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I,sDAEE,4BAAoB,iBAClBC,KAAK,WAAI,KAAKC,KAAL,CAAWC,QAAf,EAAL,CACGC,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAJ,QAAQ,QAAI,CAAA,MAAI,CAACO,QAAL,CAAc,SAACR,KAAD,wCAAiBA,KAAjB,MAAwBC,QAAQ,CAARA,QAAxB,IAAd,CAAJ,EAFhB,EAGGQ,KAHH,CAGS,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAT,EAHT,EAID,C,sBAED,iBAAS,CACP,mBAAO,KAAC,aAAD,EAAe,MAAM,CAAE,KAAKV,KAAL,CAAWC,QAAlC,EAAP,CACD,C,sBArCoBP,S,EAwCvB,cAAeK,CAAAA,QAAf","sourcesContent":["\r\n\r\nimport React, { Component, useState, useEffect } from 'react';\r\n//import AppMarkdown from '!!html-loader!./ffestiniog.md';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\n\r\n/*\r\nclass BlogImport extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { markdown: '' };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // Get the contents from the Markdown file and put them in the React state, so we can reference it in render() below.\r\n    fetch(AppMarkdown).then(res => res.text()).then(text => this.setState({ markdown: text }));\r\n  }\r\n\r\n  render() {\r\n    const { markdown } = this.state;\r\n    return <ReactMarkdown source={markdown} />;\r\n  }\r\n}\r\n\r\nfunction MDImport(require_name) {\r\n\r\n    const file_name = require_name;\r\n    const [post, setPost] = useState('');\r\n\r\n    \r\n    useEffect(() => {\r\n        import(`${file_name}`)\r\n            .then(res => {\r\n                fetch(res.default)\r\n                    .then(res => res.text())\r\n                    .then(res => setPost(res))\r\n                    .catch(err => console.log(err));\r\n            })\r\n            .catch(err => console.log(err));\r\n    });\r\n\r\n    return (\r\n        <div class=\"align-items-md-stretch h-100 p-5\">\r\n            <ReactMarkdown remarkPlugins={[gfm]} children={post} />\r\n        </div>\r\n    );\r\n    \r\n    //return{ __html: 'Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello'};\r\n\r\n}*/\r\n\r\n\r\nclass MDImport extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = { markdown: null };\r\n  }\r\n\r\n  /*\r\n  componentWillMount() {\r\n    // Get the contents from the Markdown file and put them in the React state, so we can reference it in render() below.\r\n    fetch(require(`${this.props.filename}`)).then(res => res.text()).then(text => this.setState({ markdown: text }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    const readmePath = require(`${this.props.filename}`);\r\n  \r\n    fetch(readmePath)\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(text => {\r\n        this.setState({\r\n          markdown: text\r\n        })\r\n      })\r\n  }\r\n  */\r\n\r\n  componentDidMount() {\r\n    fetch(`${this.props.filename}`)\r\n      .then(res => res.text())\r\n      .then(markdown => this.setState((state) => ({ ...state, markdown })))\r\n      .catch((err) => console.error(err));\r\n  }\r\n\r\n  render() {\r\n    return <ReactMarkdown source={this.state.markdown} />;\r\n  }\r\n}\r\n\r\nexport default MDImport;\r\n"]},"metadata":{},"sourceType":"module"}