{"ast":null,"code":"var async = require('async');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar JSONStream = require('JSONStream');\n\nvar __ = require('highland');\n\nvar datasets = require('./datasets');\n\nexports.TubeMap = TubeMap;\nexports.Maps = Maps;\n\nfunction Station(opts) {\n  this.id = opts.id;\n  this.conns = opts.conns || [];\n  this.name = opts.name || \"Unknown\";\n  this.display_name = opts.display_name || \"Unknown\";\n  this.rail = opts.rail ? parseInt(opts.rail, 10) : null;\n  this.total_lines = opts.total_lines ? parseInt(opts.total_lines, 10) : 1;\n  this.latitude = parseFloat(opts.latitude);\n  this.longitude = parseFloat(opts.longitude);\n}\n\nfunction TubeMap(opts) {\n  opts = opts || {};\n  this.stationsById = {};\n  this.stationsByName = {};\n  this.linesById = {};\n  this.linesByName = {};\n  this.stations = opts.stations || [];\n  this.connections = opts.connections || [];\n  this.lines = opts.lines || [];\n  this.make();\n}\n\nTubeMap.prototype.makeStation = function (s) {\n  s = new Station(s);\n  this.stationsById[s.id] = s;\n  this.stationsByName[s.name] = s;\n};\n\nTubeMap.prototype.path = function (from, to) {\n  var station1 = this.getStationByName(from);\n  var station2 = this.getStationByName(to);\n  return [];\n};\n\nTubeMap.prototype.getAdjacent = function (root, line) {\n  var conns = root.conns;\n\n  if (line) {\n    conns = conns.filter(function (c) {\n      return c.line == line;\n    });\n  }\n\n  return conns.map(function (c) {\n    c.station1.line = c.line;\n    c.station2.line = c.line;\n    return c.station1.id !== root.id ? c.station1 : c.station2;\n  });\n};\n\nTubeMap.prototype.constructPath = function (dict, path, start, destination) {\n  if (path[path.length - 1] && path[path.length - 1].station2 == start) {\n    return path;\n  }\n\n  path.push({\n    station1: destination,\n    station2: dict[destination.id]\n  });\n  return this.constructPath(dict, path, start, dict[destination.id]);\n};\n\nTubeMap.prototype.path = function (start, destination, line) {\n  var Q = [destination];\n  var V = {};\n  var family = {};\n  family[destination.id] = null;\n\n  while (Q.length > 0) {\n    var currentStation = Q.shift();\n\n    if (currentStation.id in V) {\n      continue;\n    }\n\n    var conns = this.getAdjacent(currentStation, line);\n    conns.forEach(function (child) {\n      if (!(child.id in V)) {\n        Q.push(child);\n      }\n\n      if (!(child.id in family)) {\n        family[child.id] = currentStation;\n      }\n    });\n    V[currentStation.id] = currentStation;\n\n    if (currentStation.id === start.id) {\n      var path = this.constructPath(family, [], destination, start);\n\n      if (line) {\n        path = path.map(function (d) {\n          d.line = line;\n          return d;\n        });\n      }\n\n      return path;\n    }\n  }\n\n  return false;\n};\n\nTubeMap.prototype.line = function (id) {\n  return this.connections.filter(function (d) {\n    return d.line == id;\n  });\n};\n\nTubeMap.prototype.makeConnection = function (c) {\n  c.station1 = this.stationsById[c.station1];\n  c.station2 = this.stationsById[c.station2];\n  c.time = parseInt(c.time, 10);\n  c.station1.conns.push(c);\n  c.station2.conns.push(c);\n};\n\nTubeMap.prototype.makeLine = function (r) {\n  this.linesById[r.line] = r;\n  this.linesByName[r.name] = r;\n};\n\nTubeMap.prototype.getLine = function (id) {\n  return this.linesById[id];\n};\n\nTubeMap.prototype.getLineByName = function (name) {\n  return this.linesByName[name];\n};\n\nTubeMap.prototype.getStation = function (id) {\n  return this.stationsById[id];\n};\n\nTubeMap.prototype.getStationByName = function (display_name) {\n  return this.stationsByName[display_name];\n};\n\nTubeMap.prototype.make = function () {\n  this.stations.forEach(this.makeStation.bind(this));\n  this.connections.forEach(this.makeConnection.bind(this));\n  this.lines.forEach(this.makeLine.bind(this));\n};\n\nfunction Maps(city, cb) {\n  var dataset = require(datasets[city].json);\n\n  cb(null, new TubeMap(dataset));\n}\n\n;","map":{"version":3,"sources":["C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/tubemaps/index.js"],"names":["async","require","fs","path","JSONStream","__","datasets","exports","TubeMap","Maps","Station","opts","id","conns","name","display_name","rail","parseInt","total_lines","latitude","parseFloat","longitude","stationsById","stationsByName","linesById","linesByName","stations","connections","lines","make","prototype","makeStation","s","from","to","station1","getStationByName","station2","getAdjacent","root","line","filter","c","map","constructPath","dict","start","destination","length","push","Q","V","family","currentStation","shift","forEach","child","d","makeConnection","time","makeLine","r","getLine","getLineByName","getStation","bind","city","cb","dataset","json"],"mappings":"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","sourcesContent":["var async = require('async');\nvar fs = require('fs');\nvar path = require('path');\nvar JSONStream = require('JSONStream');\nvar __ = require('highland');\nvar datasets = require('./datasets');\n\nexports.TubeMap = TubeMap;\nexports.Maps = Maps;\n\nfunction Station(opts) {\n  this.id = opts.id;\n  this.conns = opts.conns || [];\n  this.name = opts.name || \"Unknown\";\n  this.display_name = opts.display_name || \"Unknown\";\n  this.rail = opts.rail ? parseInt(opts.rail, 10) : null;\n  this.total_lines = opts.total_lines ? parseInt(opts.total_lines, 10) : 1;\n  this.latitude = parseFloat(opts.latitude);\n  this.longitude = parseFloat(opts.longitude);\n}\n\nfunction TubeMap(opts) {\n  opts = opts || {};\n  this.stationsById = {};\n  this.stationsByName = {};\n  this.linesById = {};\n  this.linesByName = {};\n  this.stations = opts.stations || [];\n  this.connections = opts.connections || [];\n  this.lines = opts.lines || [];\n\n  this.make();\n}\n\nTubeMap.prototype.makeStation = function(s) {\n  s = new Station(s);\n  this.stationsById[s.id] = s;\n  this.stationsByName[s.name] = s;\n};\n\nTubeMap.prototype.path = function(from, to) {\n  var station1 = this.getStationByName(from);\n  var station2 = this.getStationByName(to);\n\n  return [];\n};\n\nTubeMap.prototype.getAdjacent = function (root, line) {\n  var conns = root.conns;\n  if (line) {\n    conns = conns.filter(function (c) {\n      return c.line == line;\n    });\n  }\n  return conns.map(function(c) {\n        c.station1.line = c.line;\n        c.station2.line = c.line;\n        return c.station1.id !== root.id ? c.station1 : c.station2;\n      });\n};\n\nTubeMap.prototype.constructPath = function (dict, path, start, destination){\n  if (path[path.length-1] && path[path.length-1].station2 == start) {\n    return path;\n  }\n  path.push({station1: destination, station2: dict[destination.id]});\n  return this.constructPath(dict, path, start, dict[destination.id]);\n};\n\nTubeMap.prototype.path = function(start, destination, line){\n  var Q = [destination];\n  var V = {};\n  var family = {};\n  family[destination.id] = null;\n  \n  while (Q.length > 0) {\n    var currentStation = Q.shift();\n    if (currentStation.id in V) {\n      continue;\n    }\n    var conns = this.getAdjacent(currentStation, line);\n    conns.forEach(function(child) {\n      if (!(child.id in V)){\n        Q.push(child);\n      }\n\n      if (!(child.id in family)){\n        family[child.id] = currentStation;\n      }\n    });\n    V[currentStation.id] = currentStation;\n    if (currentStation.id === start.id) {\n      var path = this.constructPath(family, [], destination, start);\n\n      if (line) {\n        path = path.map(function(d) {\n          d.line = line;\n          return d;\n        });\n      }\n      return path;\n    }\n  }\n  return false;\n};\n\nTubeMap.prototype.line = function(id) {\n  return this.connections.filter(function(d) {\n    return d.line == id;\n  });\n};\n\nTubeMap.prototype.makeConnection = function(c) {\n  c.station1 = this.stationsById[c.station1];\n  c.station2 = this.stationsById[c.station2];\n  c.time = parseInt(c.time, 10);\n\n  c.station1.conns.push(c);\n  c.station2.conns.push(c);\n};\n\nTubeMap.prototype.makeLine = function(r) {\n  this.linesById[r.line] = r;\n  this.linesByName[r.name] = r;\n};\n\nTubeMap.prototype.getLine = function(id) {\n  return this.linesById[id];\n};\n\nTubeMap.prototype.getLineByName = function(name) {\n  return this.linesByName[name];\n}\n\nTubeMap.prototype.getStation = function(id) {\n  return this.stationsById[id];\n};\n\nTubeMap.prototype.getStationByName = function(display_name) {\n  return this.stationsByName[display_name];\n};\n\nTubeMap.prototype.make = function() {\n  this.stations.forEach(this.makeStation.bind(this));\n  this.connections.forEach(this.makeConnection.bind(this));\n  this.lines.forEach(this.makeLine.bind(this));\n};\n\nfunction Maps (city, cb) {\n  var dataset = require(datasets[city].json);\n  cb(null, new TubeMap(dataset));\n};"]},"metadata":{},"sourceType":"script"}