{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yanni\\\\Documents\\\\App_Development\\\\yanni-webpage\\\\src\\\\covid_tracker\\\\Geochart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport { select, geoPath, geoMercator, geoConicEquidistant, min, max, scaleLinear } from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  coviddata,\n  property,\n  date\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  useEffect(() => {\n    console.log(date);\n    const svg = select(svgRef.current); // Use resized dimensions, but fall back to get bounding client rect if no dimensions yet\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // Path generator from coordinates to border shapes on SVG\n\n    const projection = geoMercator().fitSize([width, height], selectedCountry || data);\n    const pathGenerator = geoPath().projection(projection); // Create path element for every country in the world\n    // NOTE: Merge data into copy of GEO JSON\n    //var coviddata_res = Object.entries(coviddata);\n    //console.log(coviddata_res);\n\n    /*\r\n    var cov_res = [];\r\n    for (const country of coviddata_res) {\r\n        const name = country[0];\r\n        console.log(name);\r\n        const Datum = country[1].data[5][property];\r\n        console.log(Datum);\r\n    }\r\n    */\n\n    var cov_res = Object.entries(coviddata).map(([k, v]) => ({\n      Label: k,\n      Datum: function () {\n        for (const day of v.data) {\n          var search_date = day.date;\n\n          if (search_date === date) {\n            return day[property];\n          }\n        }\n\n        return -100;\n      }()\n    }));\n    var copy = data;\n\n    for (const i of Object.entries(copy.features)) {\n      //console.log(i[1].properties.adm0_a3);\n      var name = \"\";\n      var num = -100; // TODO: LOOP THROUGH COVIDDATA\n\n      for (const j of cov_res) {\n        name = j.Label;\n\n        if (name === i[1].properties.adm0_a3) {\n          //console.log(name)\n          if (j.Datum) {\n            num = j.Datum;\n          }\n\n          break;\n        }\n      }\n\n      i[1].properties.num = num;\n    }\n\n    const minProp = min(data.features, feature => feature.properties.num);\n    const maxProp = max(data.features, feature => feature.properties.num); // Input, then output\n\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range(['#ccc', \"teal\"]);\n    svg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\", (e, feature) => {\n      setSelectedCountry(selectedCountry === feature ? null : feature);\n    }).attr(\"class\", \"country\").transition() //zoom effect\n    .duration(1000).attr(\"fill\", feature => feature.properties.num === -100 ? \"black\" : colorScale(feature.properties.num)).attr(\"d\", feature => pathGenerator(feature)); // render text\n\n    svg.selectAll(\".label\").data([selectedCountry]).join(\"text\").attr(\"class\", \"label\").text(feature => feature && feature.properties.name + \": \" + feature.properties.num.toLocaleString()).attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedCountry, date]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      class: \"w-100 mg-50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoChart, \"mlmqFcSSizlRlZUeTQ2LYI305CE=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["C:/Users/yanni/Documents/App_Development/yanni-webpage/src/covid_tracker/Geochart.js"],"names":["React","useRef","useEffect","useState","useResizeObserver","select","geoPath","geoMercator","geoConicEquidistant","min","max","scaleLinear","GeoChart","data","coviddata","property","date","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","console","log","svg","current","width","height","getBoundingClientRect","projection","fitSize","pathGenerator","cov_res","Object","entries","map","k","v","Label","Datum","day","search_date","copy","i","features","name","num","j","properties","adm0_a3","minProp","feature","maxProp","colorScale","domain","range","selectAll","join","on","e","attr","transition","duration","text","toLocaleString","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport { select, geoPath, geoMercator, geoConicEquidistant, min, max, scaleLinear } from \"d3\";\r\n\r\nfunction GeoChart({ data, coviddata, property, date }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(date);\r\n\r\n        const svg = select(svgRef.current);\r\n\r\n        // Use resized dimensions, but fall back to get bounding client rect if no dimensions yet\r\n        const { width, height } =\r\n            dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        // Path generator from coordinates to border shapes on SVG\r\n        const projection = geoMercator().fitSize(\r\n            [width, height],\r\n            selectedCountry || data);\r\n\r\n        const pathGenerator = geoPath().projection(projection);\r\n\r\n        // Create path element for every country in the world\r\n        // NOTE: Merge data into copy of GEO JSON\r\n        \r\n        //var coviddata_res = Object.entries(coviddata);\r\n        //console.log(coviddata_res);\r\n\r\n        /*\r\n        var cov_res = [];\r\n        for (const country of coviddata_res) {\r\n            const name = country[0];\r\n            console.log(name);\r\n            const Datum = country[1].data[5][property];\r\n            console.log(Datum);\r\n        }\r\n        */\r\n\r\n\r\n        var cov_res = Object.entries(coviddata).map(([k, v]) => (\r\n            {\r\n                Label: k,\r\n                Datum: (function () {\r\n                    for (const day of v.data) {\r\n                        var search_date = day.date;\r\n                        if (search_date === date) {\r\n                            return day[property];\r\n                        }\r\n                    }\r\n                    return -100;\r\n                })()\r\n            }\r\n        ));\r\n\r\n\r\n        var copy = data;\r\n\r\n        for (const i of Object.entries(copy.features)) {\r\n            //console.log(i[1].properties.adm0_a3);\r\n            var name = \"\";\r\n            var num = -100;\r\n\r\n            // TODO: LOOP THROUGH COVIDDATA\r\n            for (const j of cov_res) {\r\n                name = j.Label;\r\n                if (name === i[1].properties.adm0_a3) {\r\n                    //console.log(name)\r\n                    if (j.Datum) {\r\n                        num = j.Datum;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            i[1].properties.num = num;\r\n        }\r\n\r\n        const minProp = min(data.features, feature => feature.properties.num);\r\n        const maxProp = max(data.features, feature => feature.properties.num);\r\n\r\n        // Input, then output\r\n        const colorScale = scaleLinear()\r\n            .domain([minProp, maxProp])\r\n            .range(['#ccc', \"teal\"]);\r\n        svg.selectAll(\".country\")\r\n            .data(data.features)\r\n            .join(\"path\")\r\n            .on(\"click\", (e, feature) => {\r\n                setSelectedCountry(selectedCountry === feature ? null : feature);\r\n            })\r\n            .attr(\"class\", \"country\")\r\n            .transition() //zoom effect\r\n            .duration(1000)\r\n            .attr(\"fill\", feature => (feature.properties.num === -100) ? \"black\" : colorScale(feature.properties.num))\r\n            .attr(\"d\", feature => pathGenerator(feature));\r\n        // render text\r\n        svg\r\n            .selectAll(\".label\")\r\n            .data([selectedCountry])\r\n            .join(\"text\")\r\n            .attr(\"class\", \"label\")\r\n            .text(\r\n                feature =>\r\n                    feature &&\r\n                    feature.properties.name +\r\n                    \": \" +\r\n                    feature.properties.num.toLocaleString()\r\n            )\r\n            .attr(\"x\", 10)\r\n            .attr(\"y\", 25);\r\n\r\n\r\n\r\n    }, [data, dimensions, property, selectedCountry, date]);\r\n\r\n    return (\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n            <svg ref={svgRef} class=\"w-100 mg-50\"></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}