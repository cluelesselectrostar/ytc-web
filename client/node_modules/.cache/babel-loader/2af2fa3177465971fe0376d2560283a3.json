{"ast":null,"code":"import _slicedToArray from\"C:/Users/yanni/Documents/App_Development/yanni-webpage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import ResizeObserver from\"resize-observer-polyfill\";/**\r\n * Hook, that returns the current dimensions of an HTML element.\r\n * Doesn't play well with SVG.\r\n */var useResizeObserver=function useResizeObserver(ref){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),dimensions=_useState2[0],setDimensions=_useState2[1];useEffect(function(){var observeTarget=ref.current;var resizeObserver=new ResizeObserver(function(entries){entries.forEach(function(entry){setDimensions(entry.contentRect);});});resizeObserver.observe(observeTarget);return function(){resizeObserver.unobserve(observeTarget);};},[ref]);return dimensions;};export default useResizeObserver;","map":{"version":3,"sources":["C:/Users/yanni/Documents/App_Development/yanni-webpage/src/covid_tracker/useResizeObserver.js"],"names":["useEffect","useState","ResizeObserver","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":"6KAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CAEA;AACA;AACA;AACA,GAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,GAAG,CAAI,CAC/B,cAAoCH,QAAQ,CAAC,IAAD,CAA5C,wCAAOI,UAAP,eAAmBC,aAAnB,eACAN,SAAS,CAAC,UAAM,CACd,GAAMO,CAAAA,aAAa,CAAGH,GAAG,CAACI,OAA1B,CACA,GAAMC,CAAAA,cAAc,CAAG,GAAIP,CAAAA,cAAJ,CAAmB,SAAAQ,OAAO,CAAI,CACnDA,OAAO,CAACC,OAAR,CAAgB,SAAAC,KAAK,CAAI,CACvBN,aAAa,CAACM,KAAK,CAACC,WAAP,CAAb,CACD,CAFD,EAGD,CAJsB,CAAvB,CAKAJ,cAAc,CAACK,OAAf,CAAuBP,aAAvB,EACA,MAAO,WAAM,CACXE,cAAc,CAACM,SAAf,CAAyBR,aAAzB,EACD,CAFD,CAGD,CAXQ,CAWN,CAACH,GAAD,CAXM,CAAT,CAYA,MAAOC,CAAAA,UAAP,CACD,CAfD,CAiBA,cAAeF,CAAAA,iBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n/**\r\n * Hook, that returns the current dimensions of an HTML element.\r\n * Doesn't play well with SVG.\r\n */\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;"]},"metadata":{},"sourceType":"module"}