{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yanni\\\\Documents\\\\App_Development\\\\yanni-webpage\\\\src\\\\covid_tracker\\\\worldmap.js\";\nimport GeoChart from './Geochart'; // import coviddata from './covid.json';\n\nimport React, { useEffect, useRef, useState, Component } from \"react\";\nimport data from './custom.geo.json';\nimport './worldmap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 2); // just to be safe, limit data to 2 days ago\n\n    yesterday.toDateString();\n    console.log(yesterday);\n    var dd = String(yesterday.getDate()).padStart(2, '0');\n    var mm = String(yesterday.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n    var yyyy = yesterday.getFullYear();\n    var date_string = yyyy + '-' + mm + '-' + dd;\n    this.state = {\n      property: \"total_cases\",\n      date: date_string,\n      coviddata: []\n    };\n  } // Default fallback to population\n\n  /*\r\n  const [property, setProperty] = useState(\"total_cases\");\r\n  const [date, setDate] = useState(\"2021-08-27\");\r\n  //const [coviddata, setCovidData] = useState(coviddata);\r\n  */\n\n\n  componentDidMount() {\n    fetch('https://covid.ourworldindata.org/data/owid-covid-data.json').then(response => response.json()).then(data => {\n      this.setState({\n        coviddata: data\n      });\n      console.log(data);\n    });\n    this.render();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"World Map with d3-geo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GeoChart, {\n        data: data,\n        coviddata: this.state.coviddata,\n        property: this.state.property,\n        date: this.state.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select property to highlight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: this.state.property,\n        onChange: event => this.setState({\n          property: event.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"reproduction_rate\",\n          children: \"R Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"new_cases\",\n          children: \"New Cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"new_cases_per_million\",\n          children: \"New Cases Per Million\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_cases\",\n          children: \"Total Cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_cases_per_million\",\n          children: \"Total Cases Per Million\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"new_deaths\",\n          children: \"New Deaths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"new_deaths_per_million\",\n          children: \"New Deaths Per Million\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_cases\",\n          children: \"Total Deaths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_deaths_per_million\",\n          children: \"Total Deaths Per Million\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"new_tests\",\n          children: \"New Tests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"new_tests_per_thousand\",\n          children: \"New Tests Per Thousand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_tests\",\n          children: \"Total Tests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_tests_per_thousand\",\n          children: \"Total Tests Per Thousand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_vaccinations\",\n          children: \"Total Vaccinations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"total_vaccinations_per_hundred\",\n          children: \"Total Vaccinations Per Hundred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"people_vaccinated\",\n          children: \"People Vaccinated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"people_vaccinated_per_hundred\",\n          children: \"People Vaccinated Per Hundred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"stringency_index\",\n          children: \"Stringency Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"start\",\n        name: \"trip-start\",\n        value: this.state.date,\n        min: \"2020-01-01\",\n        max: \"2021-08-27\",\n        onChange: event => this.setState({\n          date: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["C:/Users/yanni/Documents/App_Development/yanni-webpage/src/covid_tracker/worldmap.js"],"names":["GeoChart","React","useEffect","useRef","useState","Component","data","WorldMap","constructor","today","Date","yesterday","setDate","getDate","toDateString","console","log","dd","String","padStart","mm","getMonth","yyyy","getFullYear","date_string","state","property","date","coviddata","componentDidMount","fetch","then","response","json","setState","render","event","target","value"],"mappings":"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","sourcesContent":["import GeoChart from './Geochart';\r\n// import coviddata from './covid.json';\r\nimport React, { useEffect, useRef, useState, Component } from \"react\";\r\nimport data from './custom.geo.json';\r\nimport './worldmap.css';\r\n\r\nclass WorldMap extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        const today = new Date()\r\n        const yesterday = new Date(today)\r\n        yesterday.setDate(yesterday.getDate() - 2) // just to be safe, limit data to 2 days ago\r\n        yesterday.toDateString()\r\n        console.log(yesterday);\r\n\r\n        var dd = String(yesterday.getDate()).padStart(2, '0');\r\n        var mm = String(yesterday.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = yesterday.getFullYear();\r\n\r\n        var date_string = yyyy + '-' + mm + '-' + dd;\r\n\r\n        this.state = {\r\n            property: \"total_cases\",\r\n            date: date_string,\r\n            coviddata: []\r\n        }\r\n    }\r\n    // Default fallback to population\r\n    /*\r\n    const [property, setProperty] = useState(\"total_cases\");\r\n    const [date, setDate] = useState(\"2021-08-27\");\r\n    //const [coviddata, setCovidData] = useState(coviddata);\r\n    */\r\n\r\n\r\n    componentDidMount() {\r\n        fetch('https://covid.ourworldindata.org/data/owid-covid-data.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    coviddata: data\r\n                });\r\n                console.log(data);\r\n            });\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h2>World Map with d3-geo</h2>\r\n                <GeoChart\r\n                    data={data}\r\n                    coviddata={\r\n                        this.state.coviddata\r\n                    }\r\n                    property={this.state.property}\r\n                    date={this.state.date} />\r\n                <h2>Select property to highlight</h2>\r\n                <select\r\n                    value={this.state.property}\r\n                    onChange={event => this.setState({ property: event.target.value })}\r\n                >\r\n                    {/* <option value=\"pop_est\">Population</option>\r\n                    <option value=\"name_len\">Name length</option>\r\n                    <option value=\"gdp_md_est\">GDP</option> */}\r\n                    <option value=\"reproduction_rate\">R Rate</option>\r\n                    <option value=\"new_cases\">New Cases</option>\r\n                    <option value=\"new_cases_per_million\">New Cases Per Million</option>\r\n                    <option value=\"total_cases\">Total Cases</option>\r\n                    <option value=\"total_cases_per_million\">Total Cases Per Million</option>\r\n                    <option value=\"new_deaths\">New Deaths</option>\r\n                    <option value=\"new_deaths_per_million\">New Deaths Per Million</option>\r\n                    <option value=\"total_cases\">Total Deaths</option>\r\n                    <option value=\"total_deaths_per_million\">Total Deaths Per Million</option>\r\n                    <option value=\"new_tests\">New Tests</option>\r\n                    <option value=\"new_tests_per_thousand\">New Tests Per Thousand</option>\r\n                    <option value=\"total_tests\">Total Tests</option>\r\n                    <option value=\"total_tests_per_thousand\">Total Tests Per Thousand</option>\r\n                    <option value=\"total_vaccinations\">Total Vaccinations</option>\r\n                    <option value=\"total_vaccinations_per_hundred\">Total Vaccinations Per Hundred</option>\r\n                    <option value=\"people_vaccinated\">People Vaccinated</option>\r\n                    <option value=\"people_vaccinated_per_hundred\">People Vaccinated Per Hundred</option>\r\n                    <option value=\"stringency_index\">Stringency Index</option>\r\n\r\n\r\n                </select>\r\n\r\n                <br></br>\r\n\r\n                <input\r\n                    type=\"date\"\r\n                    id=\"start\"\r\n                    name=\"trip-start\"\r\n                    value={this.state.date}\r\n                    min=\"2020-01-01\"\r\n                    max=\"2021-08-27\"\r\n                    onChange={event => this.setState({ date: event.target.value })}\r\n                ></input>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default WorldMap;\r\n"]},"metadata":{},"sourceType":"module"}