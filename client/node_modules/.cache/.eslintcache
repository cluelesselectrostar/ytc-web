[{"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\index.js":"1","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\App.js":"2","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Blogs.jsx":"3","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Home.jsx":"4","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Projects.jsx":"5","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\About.jsx":"6","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Contact.jsx":"7","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\CovidTracker.jsx":"8","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Life.jsx":"9","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\blogs\\HTMLBlogImport.jsx":"10","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\blogs\\Blogs_List.jsx":"11","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\blogs\\GetBlogs.jsx":"12","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\TitleBanner.jsx":"13","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\FramedFigure.jsx":"14","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\SocialMediaShare.jsx":"15","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\Links.jsx":"16","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\PageTitle.jsx":"17","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\Links_Module.jsx":"18","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\SquircleBox.jsx":"19","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\worldmap.jsx":"20","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\Geochart.jsx":"21","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\useResizeObserver.jsx":"22","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\ProjectPostList.jsx":"23","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\LineChart.jsx":"24","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\TimeChart.jsx":"25","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\useWindowsDimensions.jsx":"26"},{"size":280,"mtime":1641051236642,"results":"27","hashOfConfig":"28"},{"size":3355,"mtime":1641051236520,"results":"29","hashOfConfig":"28"},{"size":620,"mtime":1633535204613,"results":"30","hashOfConfig":"28"},{"size":2223,"mtime":1641051236688,"results":"31","hashOfConfig":"28"},{"size":3252,"mtime":1641051236698,"results":"32","hashOfConfig":"28"},{"size":11145,"mtime":1641051236670,"results":"33","hashOfConfig":"28"},{"size":564,"mtime":1633535204605,"results":"34","hashOfConfig":"28"},{"size":5165,"mtime":1641051236677,"results":"35","hashOfConfig":"28"},{"size":14816,"mtime":1641051236689,"results":"36","hashOfConfig":"28"},{"size":6248,"mtime":1633535205875,"results":"37","hashOfConfig":"28"},{"size":3190,"mtime":1633535205887,"results":"38","hashOfConfig":"28"},{"size":2698,"mtime":1633535205882,"results":"39","hashOfConfig":"28"},{"size":690,"mtime":1633535205727,"results":"40","hashOfConfig":"28"},{"size":828,"mtime":1633535205764,"results":"41","hashOfConfig":"28"},{"size":5459,"mtime":1633535205737,"results":"42","hashOfConfig":"28"},{"size":285,"mtime":1633535205758,"results":"43","hashOfConfig":"28"},{"size":476,"mtime":1633535205750,"results":"44","hashOfConfig":"28"},{"size":3080,"mtime":1641051236530,"results":"45","hashOfConfig":"28"},{"size":1552,"mtime":1633535205736,"results":"46","hashOfConfig":"28"},{"size":4998,"mtime":1641051236602,"results":"47","hashOfConfig":"28"},{"size":4189,"mtime":1641051236531,"results":"48","hashOfConfig":"28"},{"size":718,"mtime":1633535205551,"results":"49","hashOfConfig":"28"},{"size":1454,"mtime":1633535203739,"results":"50","hashOfConfig":"28"},{"size":5651,"mtime":1641051236560,"results":"51","hashOfConfig":"28"},{"size":7162,"mtime":1641051236573,"results":"52","hashOfConfig":"28"},{"size":693,"mtime":1641051236586,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b5k02i",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\index.js",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\App.js",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Blogs.jsx",[],["111","112"],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Home.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Projects.jsx",["113"],"import React from 'react';\r\n// import { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport Image from 'react-bootstrap/Image';\r\n\r\n// import GetLocalProjects from '../projects/GetProjects';\r\nimport ProjectPostList from '../components/ProjectPostList';\r\nimport TitleBanner from '../components/TitleBanner';\r\nimport PageTitle from '../components/PageTitle';\r\nimport load_image from '../images/loading.gif';\r\n\r\nfunction ProjectsPage() {\r\n    const [posts, setPosts] = useState([]);\r\n    const { search } = useLocation();\r\n    //const [loading, setLoading] = useState(false);\r\n\r\n    const fetchPosts = async () => {\r\n        //setLoading(true);\r\n        console.log(posts);\r\n        const res = await axios.get(\"https://ytc-web.herokuapp.com/api/projectposts\" + search);\r\n        setPosts(res.data);\r\n        console.log(posts);\r\n        //setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, [search, posts]);\r\n\r\n    return (\r\n        <main>\r\n            <PageTitle title=\"Projects\" />\r\n            <TitleBanner\r\n                title=\"Getting my hands dirty!\"\r\n                description={\r\n                    <div>\r\n                        <p class=\"lead\">\r\n                            This page links to all the repositories of my individual and group projects.\r\n                            Documentation and relevant introductory website is available for some group projects as well.\r\n                        </p>\r\n                        <p>\r\n                            I am proficient in the following languages:\r\n                            <ul>\r\n                                <li>C/C++/Arduino - For hardware based projects,</li>\r\n                                <li>Python - For personal web-based/ data-processing projects; and,</li>\r\n                                <li>Flutter/ Dart - For simultaneous iOS and Android app development</li>\r\n                            </ul>\r\n                        </p>\r\n                        <p>\r\n                            Of course, I am currently working with MERN to complete this website!\r\n                        </p>\r\n                    </div>\r\n                }\r\n            />\r\n\r\n            <div class=\"container py-4\">\r\n                <div class=\"alert alert-warning\" role=\"alert\">\r\n                    Currrently deploying the backend on Mongo DB. Apologies if this does not load properly!\r\n                </div>\r\n            </div>\r\n\r\n            {posts.length<4 ? (\r\n                <div>\r\n                    <div class=\"px-10 py-0 text-center\">\r\n                        <Image src={load_image} alt=\"Photo\" fluid />\r\n                        <div>Cute image courtesy of <a href=\"https://dribbble.com/shots/3790348-game-loading\" style={{color:\"black\", textDecoration:\"none\"}}>yuanzi0410</a>.</div>\r\n                    </div >\r\n                </div>\r\n            ) : (\r\n                <div class=\"album\">\r\n                    <div class=\"container\">\r\n                        <ProjectPostList posts={posts} />\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default ProjectsPage;","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\About.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Contact.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\CovidTracker.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\pages\\Life.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\blogs\\HTMLBlogImport.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\blogs\\Blogs_List.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\blogs\\GetBlogs.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\TitleBanner.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\FramedFigure.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\SocialMediaShare.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\Links.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\PageTitle.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\Links_Module.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\SquircleBox.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\worldmap.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\Geochart.jsx",["114","115"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\n// import { geoConicEquidistant } from \"d3\";\r\n\r\nfunction GeoChart({ data, coviddata, property, date }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n\r\n        const svg = select(svgRef.current);\r\n\r\n        // Use resized dimensions, but fall back to get bounding client rect if no dimensions yet\r\n        const { width, height } =\r\n            dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        // Path generator from coordinates to border shapes on SVG\r\n        const projection = geoMercator().fitSize(\r\n            [width, height],\r\n            selectedCountry || data);\r\n\r\n        const pathGenerator = geoPath().projection(projection);\r\n\r\n        // Create path element for every country in the world\r\n        // NOTE: Merge data into copy of GEO JSON\r\n\r\n        var cov_res = Object.entries(coviddata).map(([k, v]) => (\r\n            {\r\n                Label: k,\r\n                Datum: (function () {\r\n                    for (const day of v.data) {\r\n                        var search_date = day.date;\r\n                        if (search_date === date) {\r\n                            var res = day[property];\r\n                            //console.log(res);\r\n                            return res;\r\n                        }\r\n                    }\r\n                    return -100;\r\n                })()\r\n            }\r\n        ));\r\n\r\n        //console.log(\"data\")\r\n        //console.log(data);\r\n        //console.log(\"coviddata\")\r\n        //console.log(coviddata);\r\n        //console.log(\"cov_res\")\r\n        //console.log(cov_res);\r\n\r\n        var copy = data;\r\n        const maxProp = max(copy.features, feature => feature.properties.num);\r\n        var minProp = maxProp;\r\n\r\n        for (const i of Object.entries(copy.features)) {\r\n            //console.log(i[1].properties.adm0_a3);\r\n            var name = \"\";\r\n            var num = -100;\r\n\r\n            // TODO: LOOP THROUGH COVIDDATA\r\n            for (const j of cov_res) {\r\n                name = j.Label;\r\n                if (name === i[1].properties.adm0_a3) {\r\n                    //console.log(name)\r\n                    if (j.Datum) {\r\n                        num = j.Datum;\r\n                        if (num < minProp && num !== -100) {\r\n                            minProp = num;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            i[1].properties.num = num;\r\n        }\r\n\r\n        // Input, then output\r\n        const colorScale = scaleLinear()\r\n            .domain([minProp, maxProp])\r\n            .range(['#ccc', \"teal\"]);\r\n        svg.selectAll(\".country\")\r\n            .data(data.features)\r\n            .join(\"path\")\r\n            .on(\"click\", (e, feature) => {\r\n                setSelectedCountry(selectedCountry === feature ? null : feature);\r\n            })\r\n            .attr(\"class\", \"country\")\r\n            .transition() //zoom effect\r\n            .duration(1000)\r\n            .attr(\"fill\", feature => (feature.properties.num === -100) ? \"black\" : colorScale(feature.properties.num))\r\n            .attr(\"d\", feature => pathGenerator(feature));\r\n        // render text\r\n        svg\r\n            .selectAll(\".label\")\r\n            .data([selectedCountry])\r\n            .join(\"text\")\r\n            .attr(\"class\", \"label\")\r\n            .text(\r\n                feature =>\r\n                    feature &&\r\n                    feature.properties.name +\r\n                    \": \" +\r\n                    feature.properties.num.toLocaleString()\r\n            )\r\n            .attr(\"x\", 10)\r\n            .attr(\"y\", 25);\r\n\r\n    }, [data, dimensions, property, selectedCountry, date]);\r\n\r\n    return (\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n            <svg ref={svgRef} className=\"geochart\"></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeoChart;","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\useResizeObserver.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\components\\ProjectPostList.jsx",["116"],"import React, { Component } from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nexport default function ProjectPostList({ posts }) {\r\n    return (\r\n        <div class=\"row g-3\">\r\n            {posts.map(post => (\r\n            <div class=\"col-xs-12 col-md-6 col-lg-4\">\r\n                <div class=\"card shadow-sm\" style={{ height: 600 }}>\r\n                    <Image src={(post.image)} style={{ width: \"100%\", height: 250, maxHeight: 250, overflow: \"hidden\", objectFit: \"cover\" }} />\r\n                    <div class=\"card-body\">\r\n                        <h3> {post.title}</h3>\r\n                        <p class=\"card-text\">{post.description}</p>\r\n                        <div class=\"row d-flex justify-content-between align-items-center\" style={{ position: \"absolute\", bottom: 20, justifyContent: 'center' }}>\r\n                            <div class=\"btn-group col-md-6\">\r\n                                <a class=\"btn btn-sm btn-outline-secondary\" href={post.repo}>Repo</a>\r\n                                <a class=\"btn btn-sm btn-outline-secondary\" href={post.report}>Report</a>\r\n                            </div>\r\n                            <div class=\"col-md-5\">\r\n                                <small class=\"text-muted\">Published on {post.date}</small>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\LineChart.jsx",[],"C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\TimeChart.jsx",["117","118","119","120"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport * as d3 from 'd3';\r\nimport useWindowDimensions from \"./useWindowsDimensions\";\r\n\r\nfunction TimeChart({ coviddata, property, selectedCountry }) {\r\n    //const [renderList, setRenderList] = useState([]);\r\n    const { height, width } = useWindowDimensions();\r\n    console.log(width);\r\n\r\n    useEffect(() => {\r\n        ////////////////////// Line Graph for time evolution of property in selected country //////////////////////\r\n        var prop_list = [];\r\n        var country_res = null;\r\n        var prop_res = null;\r\n        var prev = 0; var res = 0;\r\n\r\n        // Render line graph if a country has been selected\r\n        if (selectedCountry) {\r\n            for (const country of Object.entries(coviddata)) {\r\n                //console.log(country);\r\n                if (country[0] === selectedCountry) {\r\n                    country_res = country[1].data;\r\n                }\r\n            }\r\n            //console.log(\"country_res\");\r\n            //console.log(country_res); // Should be an array of statistics collected on each day.\r\n\r\n            if (country_res !== null) {\r\n                prop_res = Object.entries(country_res).map(([k, v]) => (\r\n                    {\r\n                        Label: d3.timeParse(\"%Y-%m-%d\")(v.date),\r\n                        Date_Int: new Date(v.date).getTime(),\r\n                        Datum: (function () {\r\n                            var res = v[property];\r\n                            if (res === undefined) {\r\n                                prop_list = prop_list.concat(prev);\r\n                                return prev;\r\n                            } else {\r\n                                prev = res;\r\n                                prop_list = prop_list.concat(res);\r\n                                return res;\r\n                            }\r\n                        })(),\r\n                        TooltipContent: `<b>Date: </b>${v.date}<br><b>${property}: </b>${prev}`\r\n                    }\r\n                ));\r\n                console.log(\"prop_res\");\r\n                console.log(prop_res);\r\n\r\n                //console.log(\"prop_list\");\r\n                //console.log(prop_list);\r\n                //setRenderList(prop_list);\r\n            }\r\n\r\n            // Line Chart\r\n            if (prop_res !== null) {\r\n                if (width<400) {\r\n                    drawChart(prop_res, prop_list, width*0.7, height*0.4);\r\n                } else {\r\n                    drawChart(prop_res, prop_list, 600, 400);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }, [coviddata, property, selectedCountry]);\r\n\r\n\r\n    function drawChart(prop_res, prop_list, width, height) {\r\n\r\n        d3.select('#line_chart')\r\n            .select('svg')\r\n            .remove();\r\n\r\n        const margin = { top: 10, right: 10, bottom: 50, left: 50 };\r\n        const yMinValue = d3.min(prop_res, d => d.Datum);\r\n        const yMaxValue = d3.max(prop_res, d => d.Datum);\r\n        const xMinValue = d3.min(prop_res, d => d.Date_Int);\r\n        const xMaxValue = d3.max(prop_res, d => d.Date_Int);\r\n        const dateMinValue = d3.min(prop_res, d => d.Label);\r\n        const dateMaxValue = d3.max(prop_res, d => d.Label);\r\n\r\n        const svg = d3\r\n            .select('#line_chart')\r\n            .append('svg')\r\n            .attr('width', width + margin.left + margin.right)\r\n            .attr('height', height + margin.top + margin.bottom)\r\n            .append('g')\r\n            .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n        const xScale = d3\r\n            .scaleLinear()\r\n            .domain([xMinValue, xMaxValue])\r\n            .range([0, width]);\r\n        const yScale = d3\r\n            .scaleLinear()\r\n            .range([height, 0])\r\n            .domain([yMinValue, yMaxValue]);\r\n        const dateScale = d3\r\n            .scaleTime()\r\n            .range([0, width])\r\n            .domain([dateMinValue, dateMaxValue]);\r\n        const line = d3\r\n            .line()\r\n            .x(d => xScale(d.Date_Int))\r\n            .y(d => yScale(d.Datum))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        svg\r\n            .append('g')\r\n            .attr('class', 'grid')\r\n            .attr('transform', `translate(0,${height})`)\r\n            .call(\r\n                d3.axisBottom(xScale)\r\n                    .tickSize(-height)\r\n                    .tickFormat(''),\r\n            );\r\n        svg\r\n            .append('g')\r\n            .attr('class', 'grid')\r\n            .call(\r\n                d3.axisLeft(yScale)\r\n                    .tickSize(-width)\r\n                    .tickFormat(''),\r\n            );\r\n        svg\r\n            .append('g')\r\n            .attr('class', 'x-axis')\r\n            .attr('transform', `translate(0,${height})`)\r\n            .call(d3.axisBottom().scale(dateScale).tickSize(10));\r\n\r\n        svg\r\n            .append('g')\r\n            .attr('class', 'y-axis')\r\n            .call(d3.axisLeft(yScale));\r\n\r\n        //console.log(\"render list\");\r\n        //console.log(renderList);\r\n        svg\r\n            .append('path')\r\n            .datum(prop_res)\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#0D6445')\r\n            .attr('stroke-width', 4)\r\n            .attr('class', 'line')\r\n            .attr('d', line);\r\n\r\n        ////////////////// Tooltip //////////////////\r\n        /* const focus = svg\r\n            .append('g')\r\n            .attr('class', 'focus')\r\n            .style('display', 'none');\r\n        focus.append('circle').attr('r', 5).attr('class', 'circle');\r\n\r\n        const tooltip = d3\r\n            .select('#line_chart')\r\n            .append('div')\r\n            .attr('class', 'tooltip')\r\n            .style('opacity', 0);\r\n        svg\r\n            .append('rect')\r\n            .attr('class', 'overlay')\r\n            .attr('width', width)\r\n            .attr('height', height)\r\n            .style('opacity', 0)\r\n            .on('mouseover', () => {\r\n                focus.style('display', null);\r\n            })\r\n            .on('mouseout', () => {\r\n                tooltip\r\n                    .transition()\r\n                    .duration(300)\r\n                    .style('opacity', 0);\r\n            })\r\n            .on('mousemove', mousemove);\r\n\r\n        function mousemove(event) {\r\n            const bisect = d3.bisector(d => d.Date_Int).left;\r\n            const xPos = d3.pointer(this)[0];\r\n            const x0 = bisect(prop_res, xScale.invert(xPos));\r\n            const d0 = prop_res[x0];\r\n            focus.attr(\r\n                'transform',\r\n                `translate(${xScale(d0.Date_Int)},${yScale(d0.Datum)})`,\r\n            );\r\n            tooltip\r\n                .transition()\r\n                .duration(300)\r\n                .style('opacity', 0.9);\r\n            tooltip\r\n                .html(d0.tooltipContent || d0.Date_Int)\r\n                .style(\r\n                    'transform',\r\n                    `translate(${xScale(d0.Date_Int) + 30}px,${yScale(d0.Datum) - 30}px)`,\r\n                );\r\n        } */\r\n    }\r\n\r\n    return (\r\n        <center><div id=\"line_chart\" class=\"container\" /></center>\r\n    )\r\n}\r\n\r\nexport default TimeChart;","C:\\Users\\yanni\\Documents\\App_Development\\yanni-webpage\\client\\src\\covid_tracker\\useWindowsDimensions.jsx",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":30,"column":8,"nodeType":"127","endLine":30,"endColumn":23,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":3,"column":40,"nodeType":"131","messageId":"132","endLine":3,"endColumn":43},{"ruleId":"125","severity":1,"message":"133","line":111,"column":8,"nodeType":"127","endLine":111,"endColumn":59,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":26},{"ruleId":"129","severity":1,"message":"136","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":23},{"ruleId":"129","severity":1,"message":"137","line":1,"column":36,"nodeType":"131","messageId":"132","endLine":1,"endColumn":44},{"ruleId":"129","severity":1,"message":"138","line":15,"column":27,"nodeType":"131","messageId":"132","endLine":15,"endColumn":30},{"ruleId":"125","severity":1,"message":"139","line":65,"column":8,"nodeType":"127","endLine":65,"endColumn":46,"suggestions":"140"},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["143"],"no-unused-vars","'min' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'coviddata'. Either include it or remove the dependency array.",["144"],"'Component' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'res' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.",["145"],"no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [search, posts, fetchPosts]",{"range":"152","text":"153"},"Update the dependencies array to be: [data, dimensions, property, selectedCountry, date, coviddata]",{"range":"154","text":"155"},"Update the dependencies array to be: [coviddata, height, property, selectedCountry, width]",{"range":"156","text":"157"},[1019,1034],"[search, posts, fetchPosts]",[3942,3993],"[data, dimensions, property, selectedCountry, date, coviddata]",[2607,2645],"[coviddata, height, property, selectedCountry, width]"]